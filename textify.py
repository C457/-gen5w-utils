#!/usr/bin/env python3
import re
import argparse

def textify(indent, name, string):
    length = len(string) + 1  # Account for null terminator
    result = []
    i = 0
    p = 0
    while i < len(string):
        char = string[i]
        if char == '\\' and i + 1 < len(string) and string[i + 1] == 'n':
            result.append(f'{indent}{name}[{i-p}] = \'\\n\';')
        elif char == 'n' and i - 1 >= 0 and string[i - 1] == '\\':
             p += 1
        else:
            result.append(f'{indent}{name}[{i-p}] = \'{char}\';')
        i += 1
    result.append(f'{indent}{name}[{i-p}] = \'\\0\';\n')  # Append null terminator
    return "\n".join(result)


def main(input_file, output_file):
    with open(input_file, "r") as file:
        lines = file.readlines()

    new_lines = []
    new_lines.append('/* Hi! This file contains autogenerated code.\n')
    new_lines.append(' * You probably don\'t want to edit it directly!\n')
    new_lines.append(' * Instead, edit the original and run textify.py <filename> to regenerate this file.\n')
    new_lines.append(' * Anyway, thanks for playing ðŸ˜Œ')
    new_lines.append(' */\n')
    i = 0
    while i < len(lines):
        line = lines[i]
        if '//@textify' in line:
            next_line = lines[i+1]
            match = re.search(r'(\s*)char (\w+)\[\] = "(.*)";', next_line)
            if match:
                indent, name, string = match.groups()
                print(f'Found match!\n\t {name} = \'{string}\'')
                new_lines.append(f'{indent}// Begin auto-generated code ({name})\n')
                new_lines.append(f'{indent}// {name} = {string}\n')
                new_lines.append(f'{indent}char {name}[{len(string) + 1}]' + ' = {0};\n')  # Account for null terminator
                new_lines.append(textify(indent, name, string))
                new_lines.append(f'{indent}// End auto-generated code ({name})\n')
                i += 2
                continue
        new_lines.append(line)
        i += 1

    with open(output_file, "w") as file:
        file.writelines(new_lines)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="This script transforms a C source file, replacing char[] definitions with explicit char assignments.",
        epilog="also uraqt3.14",
    )
    parser.add_argument(
        "-i", "--input", default="hook.c", help="Input C source file (default: hook.c)"
    )
    parser.add_argument(
        "-o",
        "--output",
        default="out-hook.c",
        help="Output C source file (default: out-hook.c)",
    )
    args = parser.parse_args()
    main(args.input, args.output)
